import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { addImage, deleteImage, fetchImages } from './libraryAPI';

export interface LibraryState {
  images: string[];
  status: 'idle' | 'loading' | 'failed';
  selected: string[]
}

const initialState: LibraryState = {
  images: [],
  status: 'idle',
  selected: [],
};

export const fetchImagesAsync = createAsyncThunk(
  'library/fetchImages',
  async () => {
    const response = await fetchImages();
    return (response) ? response.data : []
  }
);

export const addImageAsync = createAsyncThunk(
  'library/addImage',
  async (file: File) => {
    const response = await addImage(file);
    return (response) ? response.data : ''
  }
);

export const deleteImageAsync = createAsyncThunk(
  'library/deleteImage',
  async (fileUrl: string) => {
    deleteImage(fileUrl);
    return fileUrl
  }
);

export const librarySlice = createSlice({
  name: 'library',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    select: (state, action: PayloadAction<string>) => {
      state.selected.push(action.payload);
    },
    deselect: (state, action: PayloadAction<string>) => {
      const index = state.selected.indexOf(action.payload)
      state.selected.splice(index, 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // list reducers
      .addCase(fetchImagesAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchImagesAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.images = action.payload
      })
      .addCase(fetchImagesAsync.rejected, (state) => {
        state.status = 'failed';
      })
      // add reducers
      .addCase(addImageAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addImageAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.images.push(action.payload)
      })
      .addCase(addImageAsync.rejected, (state) => {
        state.status = 'failed';
      })
      // delete reducers
      .addCase(deleteImageAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteImageAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.images.indexOf(action.payload)
        state.images.splice(index, 1);
      })
      .addCase(deleteImageAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { select, deselect } = librarySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectImages = (state: RootState) => state.library.images;
export const selectSelected = (state: RootState) => state.library.selected;

export default librarySlice.reducer;
